PROCEDURE "json.procedures::NEIGHBORS_P"(
	IN i_startVertex NVARCHAR(1000),	-- the key of the start vertex
	IN i_minDepth BIGINT, 		-- the minimum hop distance
	IN i_maxDepth BIGINT, 		-- the maximum hop distance
	IN i_dir VARCHAR(10),		-- the direction the edges are traversed: OUTGOING, INCOMING, ANY
	OUT o_vertices "json.tabletypes::TT_VERTICES_NEI",
	OUT o_verticesCount BIGINT,
	OUT o_edges "json.tabletypes::TT_EDGES_NEI"
	)
LANGUAGE GRAPH READS SQL DATA AS
BEGIN
	-- Create an instance of the graph, referring to the graph workspace object
	GRAPH g = Graph("json.graphs::SPOTIFY");
	-- Create an instance of the start vertex
	VERTEX v_start = Vertex(:g, :i_startVertex);
	-- Create a multiset of all neighbor vertices of the start vertex
	MULTISET<Vertex> m_neighbors = Neighbors(:g, :v_start, :i_minDepth, :i_maxDepth, :i_dir);
	-- Project the result from the multiset
	o_vertices = SELECT :v."ID", :v."NAME", :v."TYPE" FOREACH v IN :m_neighbors;
	o_verticesCount = COUNT(:m_neighbors);
	-- Find all edges between the vertices in m_neighbors
	MULTISET<Edge> m_edges = EDGES(:g, :m_neighbors, :m_neighbors);
	o_edges = SELECT :e."ID", :e."SOURCE", :e."TARGET" FOREACH e IN :m_edges;
END




